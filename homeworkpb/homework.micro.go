// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: homeworkpb/homework.proto

/*
Package homeworkpb is a generated protocol buffer package.

It is generated from these files:
	homeworkpb/homework.proto

It has these top-level messages:
	CheckHomeworkRequest
	CheckHomeworkResponse
*/
package homeworkpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for HomeworkChecker service

type HomeworkCheckerService interface {
	CheckHomework(ctx context.Context, in *CheckHomeworkRequest, opts ...client.CallOption) (*CheckHomeworkResponse, error)
}

type homeworkCheckerService struct {
	c    client.Client
	name string
}

func NewHomeworkCheckerService(name string, c client.Client) HomeworkCheckerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "homework"
	}
	return &homeworkCheckerService{
		c:    c,
		name: name,
	}
}

func (c *homeworkCheckerService) CheckHomework(ctx context.Context, in *CheckHomeworkRequest, opts ...client.CallOption) (*CheckHomeworkResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkChecker.CheckHomework", in)
	out := new(CheckHomeworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HomeworkChecker service

type HomeworkCheckerHandler interface {
	CheckHomework(context.Context, *CheckHomeworkRequest, *CheckHomeworkResponse) error
}

func RegisterHomeworkCheckerHandler(s server.Server, hdlr HomeworkCheckerHandler, opts ...server.HandlerOption) error {
	type homeworkChecker interface {
		CheckHomework(ctx context.Context, in *CheckHomeworkRequest, out *CheckHomeworkResponse) error
	}
	type HomeworkChecker struct {
		homeworkChecker
	}
	h := &homeworkCheckerHandler{hdlr}
	return s.Handle(s.NewHandler(&HomeworkChecker{h}, opts...))
}

type homeworkCheckerHandler struct {
	HomeworkCheckerHandler
}

func (h *homeworkCheckerHandler) CheckHomework(ctx context.Context, in *CheckHomeworkRequest, out *CheckHomeworkResponse) error {
	return h.HomeworkCheckerHandler.CheckHomework(ctx, in, out)
}
